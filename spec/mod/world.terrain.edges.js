require("world.terrain.edges",function(r,o){function t(){return a(n,arguments)}var n={en:{}},a=require("$").intl,i=require("levels"),e=require("tfw.webgl"),h=function(r){this._gl=r,this._prg=new e.Program(r,{vert:l["vert-perspective"],frag:l["frag-unicolor"]})};h.prototype.loadTerrain=function(r){var o=[],t=i[r].alti,n=t.length,a=t[0].length;t.forEach(function(r,i){r.forEach(function(r,e){r<0||(0!=e&&t[i][e-1]==r||o.push(e,i,r,e,i+1,r),e!=a-1&&t[i][e+1]==r||o.push(e+1,i,r,e+1,i+1,r),0!=i&&t[i-1][e]==r||o.push(e,i,r,e+1,i,r),i!=n-1&&t[i+1][e]==r||o.push(e,i+1,r,e+1,i+1,r))})}),this._arrAttributes=new Float32Array(o),this._bufAttributes=this._gl.createBuffer()},h.prototype.render=function(r,o,t){var n=this._gl,a=this._prg,i=this._arrAttributes.BYTES_PER_ELEMENT;a.use(),a.$uniWidth=o,a.$uniHeight=t,a.$uniTime=r,a.$uniLookX=this.lookX,a.$uniLookY=this.lookY,a.$uniLookZ=this.lookZ,a.$uniLookPhi=this.lookPhi,a.$uniLookTheta=this.lookTheta,a.$uniLookRho=this.lookRho,n.bindBuffer(n.ARRAY_BUFFER,this._bufAttributes),n.bufferData(n.ARRAY_BUFFER,this._arrAttributes,n.STATIC_DRAW),n.enableVertexAttribArray(a.attribs.attPosition),n.vertexAttribPointer(a.attribs.attPosition,3,n.FLOAT,!1,3*i,0),n.enable(n.DEPTH_TEST),n.drawArrays(n.LINES,0,this._arrAttributes.length/3)},o.exports=h;var l={"vert-perspective":"uniform float uniWidth;\r\nuniform float uniHeight;\r\nuniform float uniTime;\r\nuniform float uniLookX;\r\nuniform float uniLookY;\r\nuniform float uniLookZ;\r\nuniform float uniLookPhi;\r\nuniform float uniLookTheta;\r\nuniform float uniLookRho;\r\n\r\nattribute vec3 attPosition;\r\nattribute vec3 attColor;\r\nattribute float attThreshold;\r\n\r\nvarying vec3 varColor;\r\nvarying float varHeight;\r\nvarying float varThreshold;\r\n\r\nconst float DEPTH = 270.0;\r\nconst float ZOOM = 100000.0;\r\n\r\nconst float PI = 3.141592653589793;\r\n  \r\nvoid main() {\r\n  float theta = uniLookTheta;\r\n  float phi = uniLookPhi;\r\n  float rho = uniLookRho;\r\n  float lookX = uniLookX;\r\n  float lookY = uniLookY;\r\n  float lookZ = uniLookZ;\r\n\r\n  float cosPhi = cos(phi);      // 1\r\n  float sinPhi = sin(phi);      // 0\r\n  float cosTheta = cos(theta);  // 1\r\n  float sinTheta = sin(theta);  // 0\r\n  \r\n  float camX = cosPhi * cosTheta;    // 1\r\n  float camY = cosPhi * sinTheta;    // 0\r\n  float camZ = sinPhi;               // 0\r\n\r\n  vec3 camVZ = -vec3(camX, camY, camZ);       // (-1,0,0)\r\n  vec3 camVX = vec3(sinTheta, -cosTheta, 0);  // (0,-1,0)\r\n  vec3 camVY = cross(camVZ, camVX);           // (0,0,1)\r\n\r\n  camX = camX * rho + lookX;\r\n  camY = camY * rho + lookY;\r\n  camZ = camZ * rho + lookZ;\r\n\r\n  mat3 cameraMat = mat3(camVX.x, camVY.x, camVZ.x,\r\n                        camVX.y, camVY.y, camVZ.y,\r\n                        camVX.z, camVY.z, camVZ.z);\r\n\r\n  vec3 pos = cameraMat * (attPosition - vec3(camX, camY, camZ));\r\n  float zz = pos.z;\r\n  float xx = pos.x / uniWidth;\r\n  float yy = pos.y / uniHeight;\r\n  float w = ZOOM / (rho * (DEPTH + zz));\r\n  gl_Position = vec4(xx * w, yy * w, zz * 0.001, 1.0);\r\n  \r\n  varColor = attColor; \r\n  varHeight = attPosition.z;\r\n  varThreshold = attThreshold;\r\n}                \r\n","frag-unicolor":"precision mediump float;\r\n\r\nvoid main() {\r\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n}\r\n"};o.exports._=t});
//# sourceMappingURL=world.terrain.edges.js.map