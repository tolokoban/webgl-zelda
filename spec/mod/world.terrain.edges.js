require("world.terrain.edges",function(o,n){var t=function(){return""},i=require("levels"),a=require("tfw.webgl"),r=function(o){this._gl=o,this._prg=new a.Program(o,{vert:e["vert-perspective"],frag:e["frag-unicolor"]})};r.prototype.loadTerrain=function(o){var n=[],t=i[o].alti,a=t.length,r=t[0].length;t.forEach(function(o,i){o.forEach(function(o,e){o<0||(0!=e&&t[i][e-1]==o||n.push(e,i,o,e,i+1,o),e!=r-1&&t[i][e+1]==o||n.push(e+1,i,o,e+1,i+1,o),0!=i&&t[i-1][e]==o||n.push(e,i,o,e+1,i,o),i!=a-1&&t[i+1][e]==o||n.push(e,i+1,o,e+1,i+1,o))})}),this._arrAttributes=new Float32Array(n),this._bufAttributes=this._gl.createBuffer()},r.prototype.render=function(o,n,t){var i=this._gl,a=this._prg,r=this._arrAttributes.BYTES_PER_ELEMENT;a.use(),a.$uniWidth=n,a.$uniHeight=t,a.$uniTime=o,a.$uniLookX=this.lookX,a.$uniLookY=this.lookY,a.$uniLookZ=this.lookZ,a.$uniLookPhi=this.lookPhi,a.$uniLookTheta=this.lookTheta,a.$uniLookRho=this.lookRho,i.bindBuffer(i.ARRAY_BUFFER,this._bufAttributes),i.bufferData(i.ARRAY_BUFFER,this._arrAttributes,i.STATIC_DRAW),i.enableVertexAttribArray(a.attribs.attPosition),i.vertexAttribPointer(a.attribs.attPosition,3,i.FLOAT,!1,3*r,0),i.enable(i.DEPTH_TEST),i.drawArrays(i.LINES,0,this._arrAttributes.length/3)},n.exports=r;var e={"vert-perspective":"uniform float uniWidth;\nuniform float uniHeight;\nuniform float uniTime;\nuniform float uniLookX;\nuniform float uniLookY;\nuniform float uniLookZ;\nuniform float uniLookPhi;\nuniform float uniLookTheta;\nuniform float uniLookRho;\n\nattribute vec3 attPosition;\n\nconst float DEPTH = 27.0;\nconst float DIST = 50.0;\nconst float ZOOM = 64.0;\n\nconst float PI = 3.141592653589793;\n  \nvoid main() {\n  float theta = uniTime * 0.00012 * PI;\n  float phi = (1.0 + sin(uniTime * 0.000842)) * .1 * PI;\n  float rho = 50.0;\n\n  float cosPhi = cos(phi);      // 1\n  float sinPhi = sin(phi);      // 0\n  float cosTheta = cos(theta);  // 1\n  float sinTheta = sin(theta);  // 0\n  \n  float camX = cosPhi * cosTheta;    // 1\n  float camY = cosPhi * sinTheta;    // 0\n  float camZ = sinPhi;               // 0\n\n  vec3 camVZ = -vec3(camX, camY, camZ);       // (-1,0,0)\n  vec3 camVX = vec3(sinTheta, -cosTheta, 0);  // (0,-1,0)\n  vec3 camVY = cross(camVZ, camVX);           // (0,0,1)\n\n  camX = camX * rho + uniLookX;\n  camY = camY * rho + uniLookY;\n  camZ = camZ * rho + uniLookZ;\n\n  camX = -0.0;\n  camY = -0.0;\n  camZ = -0.0;\n  \n  mat4 cameraMat = mat4(camVX.x, camVY.x, camVZ.x, 0.0,\n                        camVX.y, camVY.y, camVZ.y, 0.0,\n                        camVX.z, camVY.z, camVZ.z, 0.0,\n                        -camX,     -camY,   -camZ, 1.0);\n\n  vec4 pos = cameraMat * vec4(attPosition - vec3(uniLookX, uniLookY, uniLookZ), 1.0);\n  float zz = pos.z;\n  float xx = pos.x / uniWidth;\n  float yy = pos.y / uniHeight;\n  float w = ZOOM * DEPTH / (DEPTH + zz);\n  gl_Position = vec4(xx * w, yy * w, zz * 0.001, 1.0);\n}                \n","frag-unicolor":"precision mediump float;\n\nvoid main() {\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n"};n.exports._=t});
//# sourceMappingURL=world.terrain.edges.js.map