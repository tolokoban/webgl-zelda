require("world.terrain.faces",function(o,n){function t(){return e(r,arguments)}function a(o,n,t){if(t<0||t>=o.length)return-2;var a=o[t];if(n<0||n>=a.length)return-2;var i=a[n];return i<0?-2:i}function i(o,n,t,a,i,r,e,l,h,c,f,s,u,v,m,g){return"undefined"==typeof g&&(g=0),[o,n,t,u,v,m,g,a,i,r,u,v,m,g,e,l,h,u,v,m,g,o,n,t,u,v,m,g,e,l,h,u,v,m,g,c,f,s,u,v,m,g]}var r={en:{}},e=require("$").intl,l=require("levels"),h=require("tfw.webgl"),c=function(o){this._gl=o,this._prg=new h.Program(o,{vert:f.vert,frag:f.frag})};c.prototype.loadTerrain=function(o){var n=0,t=.3,r=0,e=.4,h=.2,c=0,f=.3,s=.15,u=0,v=[],m=l[o].alti;m.length,m[0].length;m.forEach(function(o,l){o.forEach(function(o,g){if(!(o<0)){var T;v=v.concat(i(g+0,l+0,o,g+0,l+1,o,g+1,l+1,o,g+1,l+0,o,n,t,r,o)),T=a(m,g,l-1),T<o&&(v=v.concat(i(g+0,l+0,o,g+1,l+0,o,g+1,l+0,T,g+0,l+0,T,e,h,c,o))),T=a(m,g,l+1),T<o&&(v=v.concat(i(g+1,l+1,o,g+0,l+1,o,g+0,l+1,T,g+1,l+1,T,e,h,c,o))),T=a(m,g-1,l),T<o&&(v=v.concat(i(g+0,l+0,o,g+0,l+0,T,g+0,l+1,T,g+0,l+1,o,f,s,u,o))),T=a(m,g+1,l),T<o&&(v=v.concat(i(g+1,l+0,T,g+1,l+0,o,g+1,l+1,o,g+1,l+1,T,f,s,u,o)))}})}),console.info("[world] arr.length / 7=...",v.length/7),this._arrAttributes=new Float32Array(v),this._bufAttributes=this._gl.createBuffer()},c.prototype.render=function(o,n,t){var a=this._gl,i=this._prg;this._arrAttributes.BYTES_PER_ELEMENT;i.use(),a.enable(a.CULL_FACE),a.cullFace(a.BACK),i.$uniWidth=n,i.$uniHeight=t,i.$uniTime=o,i.$uniLookX=this.lookX,i.$uniLookY=this.lookY,i.$uniLookZ=this.lookZ,i.$uniLookPhi=this.lookPhi,i.$uniLookTheta=this.lookTheta,i.$uniLookRho=this.lookRho,a.bindBuffer(a.ARRAY_BUFFER,this._bufAttributes),a.bufferData(a.ARRAY_BUFFER,this._arrAttributes,a.STATIC_DRAW),i.enableVertexAttribFloat32Array("attPosition","attColor","attThreshold"),a.enable(a.DEPTH_TEST),a.drawArrays(a.TRIANGLES,0,this._arrAttributes.length/7)},n.exports=c;var f={vert:"uniform float uniWidth;\nuniform float uniHeight;\nuniform float uniTime;\nuniform float uniLookX;\nuniform float uniLookY;\nuniform float uniLookZ;\nuniform float uniLookPhi;\nuniform float uniLookTheta;\nuniform float uniLookRho;\n\nattribute vec3 attPosition;\nattribute vec3 attColor;\nattribute float attThreshold;\n\nvarying vec3 varColor;\nvarying float varHeight;\nvarying float varThreshold;\n\nconst float DEPTH = 270.0;\nconst float ZOOM = 100000.0;\n\nconst float PI = 3.141592653589793;\n  \nvoid main() {\n  float theta = uniLookTheta;\n  float phi = uniLookPhi;\n  float rho = uniLookRho;\n  float lookX = uniLookX;\n  float lookY = uniLookY;\n  float lookZ = uniLookZ;\n\n  float cosPhi = cos(phi);      // 1\n  float sinPhi = sin(phi);      // 0\n  float cosTheta = cos(theta);  // 1\n  float sinTheta = sin(theta);  // 0\n  \n  float camX = cosPhi * cosTheta;    // 1\n  float camY = cosPhi * sinTheta;    // 0\n  float camZ = sinPhi;               // 0\n\n  vec3 camVZ = -vec3(camX, camY, camZ);       // (-1,0,0)\n  vec3 camVX = vec3(sinTheta, -cosTheta, 0);  // (0,-1,0)\n  vec3 camVY = cross(camVZ, camVX);           // (0,0,1)\n\n  camX = camX * rho + lookX;\n  camY = camY * rho + lookY;\n  camZ = camZ * rho + lookZ;\n\n  mat3 cameraMat = mat3(camVX.x, camVY.x, camVZ.x,\n                        camVX.y, camVY.y, camVZ.y,\n                        camVX.z, camVY.z, camVZ.z);\n\n  vec3 pos = cameraMat * (attPosition - vec3(camX, camY, camZ));\n  float zz = pos.z;\n  float xx = pos.x / uniWidth;\n  float yy = pos.y / uniHeight;\n  float w = ZOOM / (rho * (DEPTH + zz));\n  gl_Position = vec4(xx * w, yy * w, zz * 0.001, 1.0);\n  \n  varColor = attColor; \n  varHeight = attPosition.z;\n  varThreshold = attThreshold;\n}                \n",frag:"precision mediump float;\n\nvarying vec3 varColor;\nvarying float varHeight;\nvarying float varThreshold;\n\n\nconst vec4 BLUE = vec4(0.0, 0.0, 1.0, 1.0);\nconst vec4 WHITE = vec4(1.0, 1.0, 1.0, 1.0);\n\nvoid main() {\n  float alpha;\n\n  gl_FragColor = vec4(varColor, 1.0);\n  if (varHeight < -1.0) {\n    if (varHeight > -1.1) {\n      gl_FragColor = BLUE;\n    } else {\n      alpha = -varHeight * .5;\n      gl_FragColor = mix( gl_FragColor, BLUE, alpha );\n    }\n  } else {\n    alpha = clamp((varHeight + 1.0) / 8.0, 0.0, 1.0);\n    gl_FragColor = mix( gl_FragColor, WHITE, alpha );\n  }\n\n  float diff = varThreshold - varHeight;\n  if (diff > 0.0 && diff < .2) {\n    gl_FragColor = vec4(\n      mix(gl_FragColor.rgb, vec3(0.0, 0.0, 0.0), (.2 - diff) * 5.0),\n      1.0);\n  }\n}\n"};n.exports._=t});
//# sourceMappingURL=world.terrain.faces.js.map