<?php
define('WIDTH', 150);
define('HEIGHT', 150);
define('SVG', '<svg preserveAspectRatio="xMidYMid meet" viewBox="0 0 ' . WIDTH . ' ' . HEIGHT . '" height="100%" width="100%" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1" id="W44">');

function delta($a, $b) {
  return floor(.5 + $a) - floor(.5 + $b);
}

class Preview {
  function __construct($id) {
    $this->file = new File("pri", "trace");
    $this->id = $id;
  }

  function load() {
    $this->save();
    /*
    if (!$this->file->exists($this->id, "svg")) {
      echo "Pas de fichier SVG avec id=" . $this->id . "\n";
      if (!$this->save()) {
        return SVG . '</svg>';
      }
    }
    */
    return $this->file->load($this->id . ':svg');
  }

  function save() {
    if (!$this->file->exists($this->id)) {
      echo "Trace does not exist: " . $this->id . "\n";
      return false;
    }
    $svg = SVG . '<g stroke-linejoin="round" stroke-linecap="round" fill="none" stroke-width="2">';
    $colors = Array('0f0', '1f0', '2f0', '3f0', '4f0', '5f0', '6f0', '7f0',
                    '8f0', '9f0', 'af0', 'bf0', 'cf0', 'df0', 'ef0', 'ff0',
                    'fe0', 'fd0', 'fc0', 'fb0', 'fa0', 'f90', 'f80', 'f70',
                    'f60', 'f50', 'f40', 'f30', 'f20', 'f10', 'f00');
    $raw = $this->file->load($this->id);
    $data = json_decode($raw, true);
    $latArr = $data["lat"];
    $lngArr = $data["lng"];
    $disArr = $data["dis"];
    $latMin = $latArr[0];
    $latMax = $latArr[0];
    $lngMin = $lngArr[0];
    $lngMax = $lngArr[0];
    $dis0 = $disArr[0];
    $step = count($colors) / ($disArr[count($disArr) - 1] - $dis0);
    // Rechercher des bornes de la trace.
    for ($i = 0 ; $i < count($latArr) ; $i++) {
      $lat = $latArr[$i];
      $lng = $lngArr[$i];
      if ($lat < $latMin) $latMin = $lat;
      if ($lat > $latMax) $latMax = $lat;
      if ($lng < $lngMin) $lngMin = $lng;
      if ($lng > $lngMax) $lngMax = $lng;
    }
    $lngCenter = ($lngMin + $lngMax) / 2;
    $latCenter = ($latMin + $latMax) / 2;
    // Recherche du facteur d'échelle le mieux adapté.
    // On va se baser sur la taille d'une tuile pour caler l'image avec les lat/lng.
    // On obtient des pixels en multipliant $latFactor par une latitude.
    echo "latCenter = $latCenter\n";
    echo "lngCenter = $lngCenter\n";
    for ($zoom = 1 ; $zoom < 19 ; $zoom++) {
      $tile = new Tile($latCenter, $lngCenter, $zoom);
      echo "zoom=$zoom ; ";
      echo "Tile(" . $tile->lat . "/" . $tile->latS . " , " . $tile->lng . "/" . $tile->lngE . ")\n";
      $latPerPixel = ($tile->lat - $tile->latS) / 256;
      $lngPerPixel = ($tile->lngE - $tile->lng) / 256;
      $latBox = (WIDTH - 10) * $latPerPixel;
      $lngBox = (HEIGHT - 10) * $lngPerPixel;
      if ($latBox < $latMax - $latMin || $lngBox < $lngMax - $lngMin) break;
    }
    $zoom--;
    echo "new Tile($latMax, $lngMin)\n";
    $tile = new Tile($latMax, $lngMin, $zoom);
    $latFactor = 256 / ($tile->lat - $tile->latS);
    $lngFactor = 256 / ($tile->lngE - $tile->lng);
    print_r(Array("lat" => $tile->lat,
                  "latS" => $tile->latS,
                  "lng" => $tile->lng,
                  "lngE" => $tile->lngE,
                  "latFactor" => $latFactor,
                  "lngFactor" => $lngFactor));
    // Images du fond de carte.
    $x = WIDTH / 2 + $lngFactor * $tile->lng;
    $y = HEIGHT / 2 - $latFactor * $tile->lat;
    echo "Image( x: $x, y: $y )\n";
    $x = 0;
    $y = 0;
    $svg .= '<image x="' . floor(.5 + $x) . '" y="' . floor(.5 + $y) 
       . '" width="256" height="256" xlink:href="'
       . 'http://c.tile.openstreetmap.org/'
       . $zoom . '/' . $tile->col . '/' . $tile->row . '.png" />';
    // Dessiner la courbe.    
    $lat = $latArr[0] - $latCenter;
    $lng = $lngArr[0] - $lngCenter;
    $x = WIDTH / 2 + $lngFactor * $lng;
    $y = HEIGHT / 2 - $latFactor * $lat;
    $svg2 = '<path stroke="#' . $colors[0] . '" d="';
    $svg2 .= "M" . floor(.5 + $x) . "," . floor(.5 + $y);
    $path = "M" . floor(.5 + $x) . "," . floor(.5 + $y);
    $xx = $x;
    $yy = $y;
    $lastColorIdx = 0;
    for ($i = 1 ; $i < count($latArr) ; $i++) {
      $lat = $latArr[$i] - $latCenter;
      $lng = $lngArr[$i] - $lngCenter;
      $x = WIDTH / 2 + $lngFactor * $lng;
      $y = HEIGHT / 2 - $latFactor * $lat;
      $colorIdx = floor(($disArr[$i] - $dis0) * $step);
      if ($colorIdx != $lastColorIdx) {
        // Changement de couleur.
        $txt = "l" . delta($x, $xx) . "," . delta($y, $yy);
        $svg2 .= $txt . '"/>';
        $path .= $txt;
        echo "colorIdx = $colorIdx\n";
        if ($colorIdx >= count($colors)) break;
        $svg2 .= '<path stroke="#' . $colors[$colorIdx] . '" d="';
        $svg2 .= "M" . floor(.5 + $x) . "," . floor(.5 + $y);
        $xx = $x;
        $yy = $y;
      }
      $dx = $xx - $x;
      $dy = $yy - $y;
      $dist = $dx * $dx + $dy * $dy;
      if ($dist > 10) {
        $txt = 'l' . delta($x, $xx) . ',' . delta($y, $yy);
        $svg2 .= $txt;
        $path .= $txt;
        $xx = $x;
        $yy = $y;
      }
      $lastColorIdx = $colorIdx;
    }
    $lat = $latArr[count($latArr) - 1] - $latCenter;
    $lng = $lngArr[count($lngArr) - 1] - $lngCenter;
    $x = WIDTH / 2 + $lngFactor * $lng;
    $y = HEIGHT / 2 - $latFactor * $lat;
    $txt = "M" . floor(.5 + $x) . "," . floor(.5 + $y) . '"/>';
    $svg2 .= $txt;
    $path .= $txt;
    $svg .= '<path stroke-width="4" opacity=".5" stroke="#000" d="'
       . $path . "'/>";
    $svg .= $svg2;
    $svg .= '</g></svg>';
    $this->file->save($this->id . ':svg', $svg);
    return true;
  }

  /**
   * Retourne la distance en mètre entre deux positions géographiques.
   */
  function distance($lat1, $lng1, $lat2, $lng2) {
    $R = 6371; // Rayon moyen de la terre en km.
    $dLat  = M_PI*($lat2 - $lat1)/180;
    $dLong = M_PI*($lng2 - $lng1)/180;

    $a = sin($dLat/2) * sin($dLat/2) +
      cos(M_PI*($lat1)/180)
      * cos(M_PI*($lat2)/180)
      * sin($dLong/2)
      * sin($dLong/2);
    $c = 2 * atan2(sqrt($a), sqrt(1-$a));
    $d = floor(($R * $c)*1000);
    return $d;
  }
}
?>
